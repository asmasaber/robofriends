{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","components_Card","key","SearchBox","seachChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","ErrorBoundry","components_CardList","connect","searchRobots","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4956d341.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => { //obj Destructing \r\n    // for Error Boundry Test ....\r\n    // throw new Error('NOOOOOOOOOOOOOOO!');\r\n    return (\r\n        <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n            <img alt=\"robot img\" src={`https://robohash.org/${id}?100*100`}/>\r\n            <div>\r\n                <h2> { name }</h2>\r\n                <p> { email } </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            { \r\n                robots.map((user) => {\r\n                    return(\r\n                            <Card key={user.id}  \r\n                                 id={user.id} \r\n                                 name={user.name} \r\n                                 email={user.email}/>\r\n                    )\r\n                })\r\n             }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ seachChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={seachChange}\r\n            />\r\n        </div>\r\n    )\r\n} \r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (        \r\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  componentDidCatch (error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n   } from './constants'\r\n  import { apiCall } from './api/api'\r\n  \r\n  export const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\r\n  \r\n  export const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    apiCall('https://jsonplaceholder.typicode.com/users')\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n  }\r\n  ","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux' \r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundry'\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport './App.css'\r\n\r\n// parameter state comes from index.js provider store state(rootReducers)\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      searchField: state.searchRobots.searchField,\r\n      robots: state.requestRobots.robots,\r\n      isPending: state.requestRobots.isPending\r\n    }\r\n  }\r\n  \r\n  // dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\r\n  // the function returns an object then uses connect to change the data from redecers.\r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n      onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n  }\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props ;\r\n        const filterRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending ?\r\n             <h1> Loading ... </h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1>RoboFriends</h1>\r\n                    <SearchBox seachChange = { onSearchChange }/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={ filterRobots }/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n   } from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n      case CHANGE_SEARCHFIELD:\r\n        return Object.assign({}, state, {searchField: action.payload})\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    robots: [],\r\n    isPending: true\r\n  }\r\n  \r\n  export const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n      case REQUEST_ROBOTS_PENDING:\r\n        return Object.assign({}, state, {isPending: true})\r\n      case REQUEST_ROBOTS_SUCCESS:\r\n        return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n      case REQUEST_ROBOTS_FAILED:\r\n        return Object.assign({}, state, {error: action.payload})\r\n      default:\r\n        return state\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers  } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons';\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger) )\n\nReactDOM.render(\n                  <Provider store={store}>\n                    <App />\n                  </Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}